哈希函数：根据整个函数和查找关键字KEY，可以直接确定查找值所在位置。
在数据结构中，哈希函数被用来将一个大的数据集合映射到一个相对较小的索引集合，以便更快地查找数据。
这种哈希函数通常设计得很简单，只需要满足在不同输入值之间生成不同的输出值即可。
此外，在数据结构中，哈希函数通常需要具有良好的均匀性，以避免哈希冲突，即不同的键映射到相同的哈希值。


哈希函数的构造方法：
	1.直接定制法 H（key）=a*key+b
	2.数字分析法
	3.平方取中法
	4.折叠法
	5.除留余数法 （常用）
	
	
根据不同的哈希函数，找到不同的解决哈希冲突的方法。
	1.开放定制法
		1）Hi =(H(key)+di)MOD m
			di有三种取法 1.线性探测再散列 
						 2.平方探测再散列
						 3.随机探测在散列（双探测再散列）
	2.链地址法 产生hash冲突后在存储数据后面加一个指针，指向后面冲突的数据
	3.公共溢出区法
	4.在散列法
	
如何删除hash表中的数据是个问题。

如果想自己构建属于自己的哈希表需要使用hash_map 


在C++中：容器类map和unordered_map已经封装好。  最底层的是pair，引入<iostream>即可使用  本质都是pair
  	两者之间的区别是 map是有序的，二者的API函数是一样的
					为了map的有序，map牺牲了必要的速度，在insert和access是O(logn)
					unordered_map的速度保持在O（1） //unordered_map的使用注意 c++11 编译器
	
	进阶：1）虽然map和unordered_map，从时间上来看，unordered_map远远稳定于map
			map的背后逻辑是红黑树
			unordered_map的背后逻辑是哈希表（简单的hash_map）
		  
			区分mulitimap：
			std::unordered_map和std::multimap都是C++ STL中关联式容器的一种。它们的区别在于：

			数据结构不同：std::unordered_map是基于哈希表实现的，而std::multimap是基于红黑树实现的。
			元素的插入顺序不同：std::unordered_map中元素的插入顺序是无序的，而std::multimap中元素的插入顺序是按照键值排序的。
			键值的唯一性不同：std::unordered_map中的键值是唯一的，而std::multimap中的键值可以重复。
		  2）c++STL标准库为map容器配备的是双向迭代器。
					这意味着，map 容器迭代器只能进行 ++p、p++、--p、p--、*p 操作，并且迭代器之间只能使用 == 或者 != 运算符进行比较。
			
		  3）map 类模板中对[ ]运算符进行了重载
		  这意味着，类似于借助数组下标可以直接访问数组中元素，通过指定的键，我们可以轻松获取 map 容器中该键对应的值。
		  反之，若当前 map 容器中没有包含该指定键的键值对，则此时使用 [ ] 运算符将不再是访问容器中的元素，而变成了向该 map 容器中增添一个键值对
		  
		  4）一定要注意map是有序的
			当使用 insert() 方法向 map 容器的指定位置插入新键值对时，其底层会先将新键值对插入到容器的指定位置
			如果其破坏了 map 容器的有序性，该容器会对新键值对的位置进行调整。
		  
		  5）multimap中没有重载【】和at（）函数   重要！！！
